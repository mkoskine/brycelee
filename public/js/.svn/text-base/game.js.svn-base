

function main() {

    gbox.setGroups(['background', 'players', 'game']);
    defineGameObjects();

    maingame = gamecycle.createMaingame('game', 'game');

    maingame.gameMenu = function() { return true; };
    maingame.gameIntroAnimation = function() { return true; };
    maingame.gameTitleIntroAnimation = function(reset) {
      if (reset) {
        toys.resetToy(this, 'rising');
      }

      gbox.blitFade(gbox.getBufferContext(),{ alpha: 1 });
      toys.logos.linear(this, 'rising', {
        image: 'logo',
        sx:    gbox.getScreenW()/2-gbox.getImage('logo').width/2,
        sy:    gbox.getScreenH(),
        x:     gbox.getScreenW()/2-gbox.getImage('logo').width/2,
        y:     20,
        speed: 1 });
    };
    maingame.initializeGame = function() {
        gbox.addObject(gameObjects.map);
        setTimeout(function() {
            gbox.addObject(gameObjects.ninja);
        }, 3000);
        setTimeout(function() {
            gbox.addObject(gameObjects.sumo);
        }, 6000);
    };

    map = createMap(0);
    gbox.createCanvas('map_canvas', { w: map.w, h: map.h });
    gbox.blitTilemap(gbox.getCanvasContext('map_canvas'), map);

    gbox.go();
}

function createMap(id) {

    return help.finalizeTilemap({
      tileset: 'mapTiles',
      map: help.asciiArtToMap(gbox._rooms[id].map,
        [ [null, ' '], [0, 'a'], [1, 'b'], [2, 'x'], [3, '%'], [4, '#'] ]),
      tileIsSolidCeil: function(obj, t) {
        return t != null && t >= 0 && t<=2;
      },
      tileIsSolidFloor: function(obj, t) {
        return t != null && t >= 0 && t<=2;
      },
      tileIsLadder: function(obj, t) {
        return t != null && t >= 3 && t<=4;
      },
      backgroundImage: gbox.getImage("roombg_" + gbox._rooms[id].backgroundImageId)
    });
}

function defineGameObjects() {
    gameObjects = {

      map: {
        id: 'map_id', // This is the object ID
        group: 'background',    // We use the 'backround' group we created above with our 'setGroups' call.
        blit: function() {
          gbox.blitFade(gbox.getBufferContext(), { alpha: 1 });
          gbox.blit(gbox.getBufferContext(),map.backgroundImage,{dx:0,dy:0,dw:gbox.getScreenW(),dh:gbox.getScreenH(),sourcecamera:true,parallaxx:0.5,parallaxy:0.5});
          gbox.blit(gbox.getBufferContext(),
            gbox.getCanvas('map_canvas'), {
              dx: 0,
              dy: 0,
              dw: gbox.getCanvas('map_canvas').width,
              dh: gbox.getCanvas('map_canvas').height,
              sourcecamera: true });
        }
      },

      player: {
        id: 'playerid',
        group: 'players',
        tileset: 'playerTiles',
        colh: 30,
        colw: 16,
        colx: 24,
        coly: 34,
        counter: 0,
        jumpsize:7,
        jumpaccy:7,
        maxaccx:6,

        initialize: function() {
          toys.brucelee.initialize(this, {
            frames:{
              still:{ speed:1, frames:[0] },
              walking:{ speed:1, frames:[1,2,3,4] },
              jumping:{ speed:1, frames:[10] },
              falling:{ speed:1, frames:[9] },
              striking:{speed:2, frames:[5,6,7,8] },
              die:{speed:1,frames:[0] }
            }
          });
          this.y = 20;
          this.x = 20;
        },

        first: function() {
          this.counter=(this.counter+1)%10;
          toys.brucelee.applyGravity(this);
          toys.brucelee.horizontalKeys(this, { left: 'left', right: 'right'});
          toys.brucelee.verticalTileCollision(this,map,"map"); // vertical tile collision (i.e. floor)
          toys.brucelee.horizontalTileCollision(this,map,"map"); // horizontal tile collision (i.e. walls)
          toys.brucelee.strikeKeys(this, {strike: 'ctrl'});
          toys.brucelee.jumpKeys(this, {jump: 'up'});
          toys.brucelee.handleAccellerations(this);

          toys.brucelee.setSide(this); // set horizontal side
          toys.brucelee.setFrame(this); // set the right animation frame


        },

        blit: function() {

          gbox.blitTile(gbox.getBufferContext(), {
            tileset: this.tileset,
            tile:    this.frame,
            dx:      this.x,
            dy:      this.y,
            fliph:   !this.side,
            flipv:   this.flipv,
            camera:  this.camera,
            alpha:   1.0
          });

        }
      },

      ninja: {
        id: 'ninjaid',
        group: 'players',
        tileset: 'ninjaTiles',
        counter: 0,
        jumpsize:7,
        jumpaccy:7,
        climbaccy:2,
        maxaccx:6,

        initialize: function() {
          toys.brucelee.initialize(this, {
            frames:{
              still:{ speed:1, frames:[0] },
              walking:{ speed:1, frames:[1,2,3,4] },
              jumping:{ speed:1, frames:[10] },
              falling:{ speed:1, frames:[9] },
              striking:{speed:2, frames:[5,6,7,8] },
              climbing:{speed:2, frames:[11,12,13,14] },
              dying:{speed:1,frames:[15] }
            },
            collisions:[
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34},
              {h:30,w:16,x:24,y:34}
            ]
          });
          this.y = 20;
          this.x = 20;
          this.collision = this.collisions[0];
          this.isDead = false;
        },

        first: function() {
          this.counter=(this.counter+1)%32;

          toys.brucelee.applyGravity(this);
          toys.brucelee.horizontalKeys(this, { left: 'left', right: 'right'});
          toys.brucelee.verticalTileCollision(this,map,"map"); // vertical tile collision (i.e. floor)
          toys.brucelee.horizontalTileCollision(this,map,"map"); // horizontal tile collision (i.e. walls)
          toys.brucelee.ladderTileCollision(this,map,"map");
          toys.brucelee.strikeKeys(this, {strike: 'ctrl'});
          toys.brucelee.strikeCollision(this);
          toys.brucelee.jumpKeys(this, {jump: 'up'});
          toys.brucelee.climbKeys(this, {climb: 'up', descend: 'down'});
          toys.brucelee.handleAccellerations(this);

          toys.brucelee.setSide(this); // set horizontal side
          toys.brucelee.setFrame(this); // set the right animation frame
          toys.brucelee.setCollision(this);

        },

        die: function() {
            this.isDead = true;
            this.isStriking = false;
            toys.brucelee.setFrame(this); // set the right animation frame
            var self = this;
            setTimeout(function () {
                self.isDead = false;
            },3000);
        },

        blit: function() {

          gbox.blitTile(gbox.getBufferContext(), {
            tileset: this.tileset,
            tile:    this.frame,
            dx:      this.x,
            dy:      this.y,
            fliph:   !this.side,
            flipv:   this.flipv,
            camera:  this.camera,
            alpha:   1.0
          });

        }

      },

      sumo: {
        id: 'sumoid',
        group: 'players',
        tileset: 'sumoTiles',
        counter: 0,
        jumpsize:7,
        jumpaccy:7,
        climbaccy:2,
        maxaccx:6,

        initialize: function() {
          toys.brucelee.initialize(this, {
            frames:{
              still:{ speed:1, frames:[0] },
              walking:{ speed:0.5, frames:[1,2,3,4] },
              jumping:{ speed:1, frames:[18] },
              falling:{ speed:1, frames:[19] },
              striking:{speed:1, frames:[5,6,7,8,9,10,11,12,13,14,15,16,17,17,16,15,14,14,13,12,11,10,9,8,7,6,5] },
              climbing:{speed:2, frames:[20,21,22,23] },
              dying:{speed:1,frames:[24] }
            },
            collisions:[
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},

                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},

                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},

                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},

                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24},
                {h:40,w:22,x:22,y:24}
            ]
          });
          this.y = 20;
          this.x = 20;
          this.frame = 0;
          this.collision = this.collisions[0];
          this.isDead = false;
        },

        first: function() {
          this.counter=(this.counter+1)%32;

          toys.brucelee.applyGravity(this);
          toys.brucelee.horizontalKeys(this, { left: 'left', right: 'right'});
          toys.brucelee.verticalTileCollision(this,map,"map"); // vertical tile collision (i.e. floor)
          toys.brucelee.horizontalTileCollision(this,map,"map"); // horizontal tile collision (i.e. walls)
          toys.brucelee.ladderTileCollision(this,map,"map");
          toys.brucelee.jumpKeys(this, {jump: 'up'});
          toys.brucelee.climbKeys(this, {climb: 'up', descend: 'down'});
          toys.brucelee.strikeKeys(this, {strike: 'ctrl'});
          toys.brucelee.strikeCollision(this); // vertical tile collision (i.e. floor)
          toys.brucelee.handleAccellerations(this);

          toys.brucelee.setSide(this); // set horizontal side
          toys.brucelee.setFrame(this); // set the right animation frame
          toys.brucelee.setCollision(this);
        },

        die: function() {
            this.isDead = true;
            this.isStriking = false;
            toys.brucelee.setFrame(this); // set the right animation frame
            var self = this;
            setTimeout(function () {
                self.isDead = false;
            },3000);
        },

        blit: function() {

          gbox.blitTile(gbox.getBufferContext(), {
            tileset: this.tileset,
            tile:    this.frame,
            dx:      this.x,
            dy:      this.y,
            fliph:   !this.side,
            flipv:   this.flipv,
            camera:  this.camera,
            alpha:   1.0
          });

        }
      }

    };
}

